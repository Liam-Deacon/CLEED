# CLEED - Computational Low Energy Electron Diffraction
# Copyright (C) 1994-2014 Georg Held
# Copyright (C) 2013-2014 Liam Deacon
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

CMAKE_MINIMUM_REQUIRED(VERSION 2.8.11)
MARK_AS_ADVANCED(CMAKE_BACKWARDS_COMPATIBILITY)
INCLUDE(CheckCCompilerFlag)
INCLUDE(InstallRequiredSystemLibraries)
# allow more human readable "if then else" constructs
SET(CMAKE_ALLOW_LOOSE_LOOP_CONSTRUCTS TRUE )
SET(CMAKE_COLOR_MAKEFILE ON)
SET(CMAKE_VERBOSE_MAKEFILE OFF)

# Find includes in corresponding build directories
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# set default cmake build type to RelWithDebInfo (None Debug Release RelWithDebInfo MinSizeRel)
IF(CMAKE_BUILD_TYPE STREQUAL "")
    SET(CMAKE_BUILD_TYPE "RelWithDebInfo")
ENDIF()

# set default install prefix to project root directory
IF(CMAKE_INSTALL_PREFIX STREQUAL "/usr/local")
    SET(CMAKE_INSTALL_PREFIX "${PROJECT_SOURCE_DIR}")
ENDIF()


##############################################################################
#                           Project section                                  #
##############################################################################

PROJECT(CLEED)
SET(CPACK_PACKAGE_NAME "CLEED")
SET(CPACK_PACKAGE_DESCRIPTION_SUMMARY "Automated Surface Structure determination from LEED-IV curves")
SET(CPACK_PACKAGE_VENDOR "Liam Deacon")
SET(CPACK_PACKAGE_CONTACT "liam.deacon@diamond.ac.uk")
SET(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_BINARY_DIR}/../LICENSE.txt")
SET(CPACK_RESOURCE_FILE_README "${CMAKE_CURRENT_BINARY_DIR}/../README.md")
SET(CPACK_RESOURCE_FILE_NOTES "${CMAKE_CURRENT_BINARY_DIR}/../RELEASE_NOTES.txt")
SET(CPACK_RESOURCE_FILE_CHANGELOG "${CMAKE_CURRENT_BINARY_DIR}/../ChangeLog.txt")
SET(CPACK_PACKAGE_VERSION_MAJOR "2014")
SET(CPACK_PACKAGE_VERSION_MINOR "04")
SET(CPACK_PACKAGE_VERSION_PATCH "27")
SET(CPACK_PACKAGE_INSTALL_DIRECTORY "CLEED")
SET(CPACK_PACKAGE_INSTALL_REGISTRY_KEY 
"CLEED ${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
SET(CPACK_PACKAGE_URL "http://www.reading.ac.uk/chemistry/about/staff/g-held.aspx")
SET(CPACK_INSTALL_CMAKE_PROJECTS "${CMAKE_BINARY_DIR};${CMAKE_PROJECT_NAME};ALL;/")

# Branch
SET(SOURCE_BRANCH "Development")
SET(LICENSE "")

# Program information
SET(AOI_LEED_VERSION_MAJOR "${CPACK_PACKAGE_VERSION_MAJOR}")
SET(AOI_LEED_VERSION_MINOR "${CPACK_PACKAGE_VERSION_MINOR}")
SET(AOI_LEED_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
SET(AOI_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/src/include/caoi_leed.h.in"
    "${PROJECT_SOURCE_DIR}/src/include/caoi_leed.h" IMMEDIATE @ONLY )

SET(AOI_RFAC_VERSION_MAJOR "${CPACK_PACKAGE_VERSION_MAJOR}")
SET(AOI_RFAC_VERSION_MINOR "${CPACK_PACKAGE_VERSION_MINOR}")
SET(AOI_RFAC_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
SET(AOI_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
CONFIGURE_FILE(  "${PROJECT_SOURCE_DIR}/src/include/caoi_rfac.h.in"
    "${PROJECT_SOURCE_DIR}/src/include/caoi_rfac.h" IMMEDIATE @ONLY )

SET(CLEED_NSYM_VERSION_MAJOR "${CPACK_PACKAGE_VERSION_MAJOR}")
SET(CLEED_NSYM_VERSION_MINOR "${CPACK_PACKAGE_VERSION_MINOR}")
SET(CLEED_NSYM_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
SET(CLEED_NSYM_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
CONFIGURE_FILE(  "${PROJECT_SOURCE_DIR}/src/include/leed_ver.h.in"
    "${PROJECT_SOURCE_DIR}/src/include/leed_ver.h" IMMEDIATE @ONLY )

SET(CLEED_SYM_VERSION_MAJOR "${CPACK_PACKAGE_VERSION_MAJOR}")
SET(CLEED_SYM_VERSION_MINOR "${CPACK_PACKAGE_VERSION_MINOR}")
SET(CLEED_SYM_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
SET(CLEED_SYM_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/src/include/leed_ver_sym.h.in"
   "${PROJECT_SOURCE_DIR}/src/include/leed_ver_sym.h" IMMEDIATE @ONLY )

SET(CRFAC_VERSION_MAJOR "${CPACK_PACKAGE_VERSION_MAJOR}")
SET(CRFAC_VERSION_MINOR "${CPACK_PACKAGE_VERSION_MINOR}")
SET(CRFAC_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
SET(CRFAC_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/src/include/rfac_ver.h.in"
   "${PROJECT_SOURCE_DIR}/src/include/rfac_ver.h" IMMEDIATE @ONLY )

SET(CSEARCH_VERSION_MAJOR "${CPACK_PACKAGE_VERSION_MAJOR}")
SET(CSEARCH_VERSION_MINOR "${CPACK_PACKAGE_VERSION_MINOR}")
SET(CSEARCH_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
SET(CSEARCH_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/src/include/search_ver.h.in"
   "${PROJECT_SOURCE_DIR}/src/include/search_ver.h" IMMEDIATE @ONLY )

SET(FTSMOOTH_VERSION_MAJOR "${CPACK_PACKAGE_VERSION_MAJOR}")
SET(FTSMOOTH_VERSION_MINOR "${CPACK_PACKAGE_VERSION_MINOR}")
SET(FTSMOOTH_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
SET(FTSMOOTH_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/src/include/ftsmooth.h.in"
   "${PROJECT_SOURCE_DIR}/src/include/ftsmooth.h" IMMEDIATE @ONLY )

SET(LATT_VERSION_MAJOR "${CPACK_PACKAGE_VERSION_MAJOR}")
SET(LATT_VERSION_MINOR "${CPACK_PACKAGE_VERSION_MINOR}")
SET(LATT_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
SET(LATT_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/src/include/latt.h.in"
   "${PROJECT_SOURCE_DIR}/src/include/latt.h" IMMEDIATE @ONLY )

SET(PATT_VERSION_MAJOR "${CPACK_PACKAGE_VERSION_MAJOR}")
SET(PATT_VERSION_MINOR "${CPACK_PACKAGE_VERSION_MINOR}")
SET(PATT_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
SET(PATT_MAINTAINER "Liam Deacon (liam.deacon@diamond.ac.uk)")
CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/src/include/patt_ver.h.in"
   "${PROJECT_SOURCE_DIR}/src/include/patt_ver.h" IMMEDIATE @ONLY )

SET(MKIV_VERSION_MAJOR "${CPACK_PACKAGE_VERSION_MAJOR}")
SET(MKIV_VERSION_MINOR "${CPACK_PACKAGE_VERSION_MINOR}")
SET(MKIV_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
SET(MKIV_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/src/mkiv/mkiv_ver.h.in"
   "${PROJECT_SOURCE_DIR}/src/mkiv/mkiv_ver.h" IMMEDIATE @ONLY )

# Project options
OPTION(WITH_PHASESHIFTS "Set to ON to download and integrate PhaseShifts Python package" OFF)
OPTION(BUILD_SHARED_LIBS "Set to OFF to build static libraries" ON)
OPTION(USE_OPENMP "Set to OFF to have single threaded executables" OFF)
OPTION(WITH_QT "Set to ON to build Qt app frontends" OFF)
OPTION(WITH_OPENCL "Set to ON to enable OpenCL GPGPU support" OFF)
OPTION(INSTALL_DOC "Set to OFF to skip build/install Documentation" ON)

# set cmake module path
IF (NOT CMAKE_MODULE_PATH)
    SET (CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/CMakeModules")
ENDIF (NOT CMAKE_MODULE_PATH)

IF (WITH_QT STREQUAL "ON")
    IF (QT_VERSION STREQUAL "Qt5" OR QT_VERSION STREQUAL "qt5" )
        FIND_PACKAGE(Qt5 REQUIRED)
    ELSE ()
        FIND_PACKAGE(Qt4 REQUIRED)
        SET (QT_VERSION "Qt4")
    ENDIF ()
    
    # Instruct CMake to run moc automatically when needed.
    SET(CMAKE_AUTOMOC ON)
    
    INCLUDE(${QT_USE_FILE})
    #MESSAGE ( STATUS ${QT_USE_FILE})
ENDIF ()

# This is only required for the script to work in the version control
IF (WITH_OPENCL STREQUAL "ON")
    SET (CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/CMakeModules")
    FIND_PACKAGE( OpenCL REQUIRED )
    INCLUDE_DIRECTORIES( ${OPENCL_INCLUDE_DIRS} )
    IF (OPENCL_HAS_CPP_BINDINGS )
        MESSAGE( STATUS "OpenCL has CPP bindings. Full include is: " ${OPENCL_INCLUDE_DIRS} )
    ELSE (OPENCL_HAS_CPP_BINDINGS )
        MESSAGE( "No OpenCL CPP bindings found" )
        SET (WITH_OPENCL "OFF")
    ENDIF (OPENCL_HAS_CPP_BINDINGS )
ENDIF()

##############################################################################
#                          Compiler section                                  #
##############################################################################

#test for ANDROID and look for stuff not relevant to android.
# if(NOT ANDROID)
# #jni is available by default on android
# find_package(JNI)
# include_directories(${JNI_INCLUDE_DIRS})
# endif()

# find java
FIND_PACKAGE (Java 
#    REQUIRED
)
INCLUDE (UseJava)

# find Python libraries & commands
FIND_PACKAGE(PythonInterp)
FIND_PACKAGE(PythonLibs 2.7)
FIND_PROGRAM(PYTHON_PIP_EXECUTABLE pip)
FIND_PROGRAM(PYTHON_EASY_INSTALL easy_install)

# enable Fortran support
ENABLE_LANGUAGE (Fortran)
GET_FILENAME_COMPONENT (Fortran_COMPILER_NAME ${CMAKE_Fortran_COMPILER} NAME)

# enable resource compiler
ENABLE_LANGUAGE(RC)

# Set Warnings
IF (CMAKE_C_COMPILER_ID STREQUAL "GNU" OR
    CMAKE_C_COMPILER_ID STREQUAL "Clang")
    SET(WARNINGS "-pedantic -Wall -Wextra -Wfloat-equal -Wshadow -Wwrite-strings")
    IF (PARANOID)
        SET (WARNINGS "${WARNINGS} -W -Wconversion -Wcast-qual")
    ENDIF (PARANOID)
    # set list of files to copy for running of program
    GET_FILENAME_COMPONENT(C_COMPILER_PARENT_DIR ${CMAKE_C_COMPILER} PATH)
    FILE (GLOB RUNTIME_LIBRARIES ${C_COMPILER_PARENT_DIR}/*.dll)
ELSEIF("${CMAKE_C_COMPILER_ID}" STREQUAL "MSVC")
    SET(WARNINGS "/W4 /WX /EHsc")
    SET(RUNTIME_LIBRARIES
        "C:/Program Files/Microsoft Visual Studio 9.0/VC/redist/x86/Microsoft.VC90.CRT/msvcm90.dll"
        "C:/Program Files/Microsoft Visual Studio 9.0/VC/redist/x86/Microsoft.VC90.CRT/msvcp90.dll"
        "C:/Program Files/Microsoft Visual Studio 9.0/VC/redist/x86/Microsoft.VC90.CRT/msvcr90.dll"
        "C:/Program Files/Microsoft Visual Studio 9.0/VC/redist/x86/Microsoft.VC90.CRT/Microsoft.VC90.CRT.manifest"
    )
ENDIF()

# check compiler flags

SET(CMAKE_CXX_FLAGS ${WARNINGS}
    CACHE STRING "Flags used by the compiler during all build types." FORCE)
SET(CMAKE_C_FLAGS ${WARNINGS}
    CACHE STRING "Flags used by the compiler during all build types." FORCE)

IF (CMAKE_C_COMPILER_ID STREQUAL "GNU" OR
    CMAKE_C_COMPILER_ID STREQUAL "Clang")
    
    # check compiler flags
    CHECK_C_COMPILER_FLAG(-fexceptions CC_HAS_EXCEPTIONS_FLAG)
    CHECK_C_COMPILER_FLAG(-fbounds-check CC_HAS_BOUNDS_CHECK_FLAG)
    CHECK_C_COMPILER_FLAG(-fstack-check CC_HAS_STACK_CHECK_FLAG)
    CHECK_C_COMPILER_FLAG(-g CC_HAS_G_FLAG)
    CHECK_C_COMPILER_FLAG(-g3 CC_HAS_G3_FLAG)
    CHECK_C_COMPILER_FLAG(-O0 CC_HAS_O0_FLAG)
    CHECK_C_COMPILER_FLAG(-O3 CC_HAS_O3_FLAG)
    CHECK_C_COMPILER_FLAG(-mfpmath=sse CC_HAS_FPMATH_SSE_FLAG)
    CHECK_C_COMPILER_FLAG(-ffast-math CC_HAS_FAST_MATH_FLAG)
    CHECK_C_COMPILER_FLAG(-funroll-loops CC_HAS_UNROLL_LOOPS_FLAG)
    CHECK_C_COMPILER_FLAG(-march=native CC_HAS_ARCH_NATIVE_FLAG)
    CHECK_C_COMPILER_FLAG(-mtune=native CC_HAS_TUNE_NATIVE_FLAG)
    CHECK_C_COMPILER_FLAG(-std=c99 CC_HAS_STD_C99_FLAG)
    CHECK_C_COMPILER_FLAG(-std=gnu99 CC_HAS_STD_GNU99_FLAG)
    CHECK_C_COMPILER_FLAG(-fdiagnostics-color=auto CC_HAS_DIAGNOSTICS_COLOR_FLAG)
    
    # check for OpenMP usability
    IF (USE_OPENMP STREQUAL "ON")
        FIND_PACKAGE(OpenMP)
        IF (OpenMP_FOUND)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
            SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
            ADD_DEFINITIONS ("-D_USE_OPENMP")
        ELSE (OpenMP_FOUND)
            SET (USE_OPENMP OFF)
        ENDIF (OpenMP_FOUND)
    ENDIF(USE_OPENMP STREQUAL "ON")
    
    IF (CC_HAS_STD_GNU99_FLAG)
        SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=gnu99")
    ELSEIF (CC_HAS_C99_FLAG)
        SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -std=c99")
    ENDIF(CC_HAS_STD_GNU99_FLAG)
    
    IF (CC_HAS_DIAGNOSTICS_COLOR_FLAG)
        SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fdiagnostics-color=auto")
    ENDIF (CC_HAS_DIAGNOSTICS_COLOR_FLAG)
    
    IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
        IF (CC_HAS_O0_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O0")
        ENDIF (CC_HAS_O0_FLAG)
    ENDIF (CMAKE_BUILD_TYPE STREQUAL "Debug")
    
    # use '-mtune=native' on all but 'MinSizeRel' build
    IF (NOT CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
        IF (CC_HAS_TUNE_NATIVE_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mtune=native")
        ENDIF (CC_HAS_TUNE_NATIVE_FLAG)
    ENDIF (NOT CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
    
    # add debugging options or else fast code optimisations for 'MinSizeRel' build
    IF (CMAKE_BUILD_TYPE STREQUAL "Debug" OR
        CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo")
        # optimise for debugging
        IF (CC_HAS_EXCEPTIONS_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fexceptions")
        ENDIF (CC_HAS_EXCEPTIONS_FLAG)
            
        IF (CC_HAS_BOUNDS_CHECK_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fbounds-check")
        ENDIF (CC_HAS_BOUNDS_CHECK_FLAG)

        IF (CC_HAS_STACK_CHECK_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fstack-check")
        ENDIF (CC_HAS_STACK_CHECK_FLAG)
        
        IF (CC_HAS_G3_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g3")
        ELSEIF (CC_HAS_G_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
        ENDIF()
    
    ELSEIF (CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
        # optimise for fast & lean code
        IF (CC_HAS_O3_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
        ENDIF (CC_HAS_O3_FLAG)
        
        IF (CC_HAS_FAST_MATH_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -ffast-math")
        ENDIF (CC_HAS_FAST_MATH_FLAG)
        
        IF (CC_HAS_UNROLL_LOOPS_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -funroll-loops")
        ENDIF (CC_HAS_UNROLL_LOOPS_FLAG)
        
        IF (CC_HAS_ARCH_NATIVE_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native")
        ENDIF (CC_HAS_ARCH_NATIVE_FLAG)
        
        IF (CC_HAS_FPMATH_SSE_FLAG)
            SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfpmath=sse")
        ENDIF (CC_HAS_FPMATH_SSE_FLAG)
    ENDIF()
    

ENDIF()

# definitions
IF( CMAKE_BUILD_TYPE STREQUAL "Debug" OR
    CMAKE_BUILD_TYPE STREQUAL "RelWithDebInfo" )
    ADD_DEFINITIONS( "-DDEBUG" )
ENDIF()

# include directories
INCLUDE_DIRECTORIES ( ${PROJECT_SOURCE_DIR}/src/include
                      ${PROJECT_SOURCE_DIR}/src/mkiv
                      ${PROJECT_SOURCE_DIR}/lib/libtiff/include
)

# LD flags
IF(WIN32)
    SET(CMAKE_FIND_LIBRARY_PREFIXES "lib")
    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".lib" ".dll")
ELSE(WIN32)
    SET(CMAKE_FIND_LIBRARY_PREFIXES "lib")
    SET(CMAKE_FIND_LIBRARY_SUFFIXES ".so" ".a")
ENDIF(WIN32)

SET (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -lm")

#LIST (APPEND CMAKE_LIBRARY_PATH ${PROJECT_SOURCE_DIR}/lib)
FIND_LIBRARY(TIFF_LIBRARY NAME tiff)
IF(WIN32)
    SET (TIFF_LIBRARY "${PROJECT_SOURCE_DIR}/lib/win32/libtiff3.dll")
    GET_FILENAME_COMPONENT(TIFF_LIBRARY_DIR ${TIFF_LIBRARY} PATH)
ENDIF(WIN32)


# create uninstall configuration file
CONFIGURE_FILE( "${PROJECT_SOURCE_DIR}/cmake_uninstall.cmake.in"
   "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake"
   IMMEDIATE @ONLY 
)

# create uninstall target
ADD_CUSTOM_TARGET( uninstall "${CMAKE_COMMAND}" 
    -P "${PROJECT_BINARY_DIR}/cmake_uninstall.cmake" 
)

# create configuration file from .in file
#CONFIGURE_FILE("${PROJECT_SOURCE_DIR}/${PROJECT_NAME}Config.cmake.in"
#    "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" @ONLY 
#)

# install configuration file
#INSTALL( FILES "${PROJECT_BINARY_DIR}/${PROJECT_NAME}Config.cmake" DESTINATION . )

# display status message for important variables
MESSAGE( STATUS )
MESSAGE( STATUS "-------------------------------------------------------------------------------" )
MESSAGE( STATUS "BUILD_SHARED_LIBS = ${BUILD_SHARED_LIBS}" )
MESSAGE( STATUS "CMAKE_INSTALL_PREFIX = ${CMAKE_INSTALL_PREFIX}" )
MESSAGE( STATUS "CMAKE_BUILD_TYPE = ${CMAKE_BUILD_TYPE}" )
MESSAGE( STATUS "CMAKE_C_FLAGS = ${CMAKE_C_FLAGS}" )
MESSAGE( STATUS "CMAKE_CXX_FLAGS = ${CMAKE_CXX_FLAGS}" )
MESSAGE( STATUS "CMAKE_MODULE_PATH = ${CMAKE_MODULE_PATH}" )
#MESSAGE( STATUS "${PROJECT_NAME}_DEPENDS = \"${${PROJECT_NAME}_DEPENDS}\"" )
MESSAGE( STATUS "INSTALL_DOC = ${INSTALL_DOC}" )
MESSAGE( STATUS "WITH_OPENCL = ${WITH_OPENCL}" )
MESSAGE( STATUS "WITH_PHASESHIFTS = ${WITH_PHASESHIFTS}" )
MESSAGE( STATUS "WITH_QT = ${WITH_QT}")
MESSAGE( STATUS "USE_OPENMP = ${USE_OPENMP}" )
IF (WITH_PHASESHIFTS STREQUAL "ON")
    MESSAGE (STATUS "PYTHON_PIP_EXECUTABLE = ${PYTHON_PIP_EXECUTABLE}" )
ENDIF (WITH_PHASESHIFTS STREQUAL "ON")
IF (WITH_QT STREQUAL "ON")
    MESSAGE (STATUS "QT_QMAKE_EXECUTABLE = ${QT_QMAKE_EXECUTABLE}")
ENDIF (WITH_QT STREQUAL "ON")
MESSAGE( STATUS )
MESSAGE( STATUS "Change a value with: cmake -D<Variable>=<Value>" )
MESSAGE( STATUS "-------------------------------------------------------------------------------" )
MESSAGE( STATUS )

#CHECK_INCLUDE_FILES(CheckIncludeFiles)
#CHECK_INCLUDE_FILES(malloc.h HAVE_MALLOC_H)

##############################################################################
#                           Sources section                                  #
##############################################################################

SET (caoi_leed_SOURCE_DIR src/aoi_leed)
SET (caoi_rfac_SOURCE_DIR src/aoi_rfac)
SET (cleed_nsym_SOURCE_DIR src/leed_nsym)
SET (cleed_sym_SOURCE_DIR src/leed_sym)
SET (crfac_SOURCE_DIR src/rfac)
SET (csearch_SOURCE_DIR src/search)
SET (debye_SOURCE_DIR src/debye)
SET (ftsmooth_SOURCE_DIR src/ftsmooth)
SET (latt_SOURCE_DIR src/latt)
SET (mkiv_SOURCE_DIR src/mkiv)
SET (patt_SOURCE_DIR src/patt)

# 
SET (CPLOBJ ${cleed_nsym_SOURCE_DIR}/cribasfun.c)

# basic qm functions
SET (QMOBJ 
    ${cleed_nsym_SOURCE_DIR}/qmbessm.c
    ${cleed_nsym_SOURCE_DIR}/qmcgc.c
    ${cleed_nsym_SOURCE_DIR}/qmhank.c
    ${cleed_nsym_SOURCE_DIR}/qmylm.c
)

# matrix library
SET (MATOBJ 
    ${cleed_nsym_SOURCE_DIR}/matabs.c
    ${cleed_nsym_SOURCE_DIR}/matalloc.c
    ${cleed_nsym_SOURCE_DIR}/matarralloc.c
    ${cleed_nsym_SOURCE_DIR}/matarrfree.c
    ${cleed_nsym_SOURCE_DIR}/matcgau.c
    ${cleed_nsym_SOURCE_DIR}/matcheck.c
    ${cleed_nsym_SOURCE_DIR}/matclu.c
    ${cleed_nsym_SOURCE_DIR}/matcol.c
    ${cleed_nsym_SOURCE_DIR}/matconj.c
    ${cleed_nsym_SOURCE_DIR}/matcop.c
    ${cleed_nsym_SOURCE_DIR}/matdiff.c
    ${cleed_nsym_SOURCE_DIR}/matext.c
    ${cleed_nsym_SOURCE_DIR}/matfree.c
    ${cleed_nsym_SOURCE_DIR}/matins.c
    ${cleed_nsym_SOURCE_DIR}/matinv.c
    ${cleed_nsym_SOURCE_DIR}/matmul.c
    ${cleed_nsym_SOURCE_DIR}/matnattovht.c
    ${cleed_nsym_SOURCE_DIR}/matread.c
    ${cleed_nsym_SOURCE_DIR}/matrlu.c
    ${cleed_nsym_SOURCE_DIR}/matrow.c
    ${cleed_nsym_SOURCE_DIR}/matrm.c
    ${cleed_nsym_SOURCE_DIR}/matscal.c
    ${cleed_nsym_SOURCE_DIR}/matshow.c
    ${cleed_nsym_SOURCE_DIR}/matshowabs.c
    ${cleed_nsym_SOURCE_DIR}/matshowpar.c
    ${cleed_nsym_SOURCE_DIR}/matsqmod.c
    ${cleed_nsym_SOURCE_DIR}/mattrace.c
    ${cleed_nsym_SOURCE_DIR}/mattrans.c
    ${cleed_nsym_SOURCE_DIR}/matwrite.c
)

# input for LEED programs
SET (DEBOBJ ${cleed_nsym_SOURCE_DIR}/linpdebtemp.c)

SET (INPOBJ 
    ${cleed_nsym_SOURCE_DIR}/linpbullayer.c 
    ${cleed_nsym_SOURCE_DIR}/linpovllayer.c 
    ${cleed_nsym_SOURCE_DIR}/linpphasend.c  
    ${cleed_nsym_SOURCE_DIR}/linprdbulnd.c  
    ${cleed_nsym_SOURCE_DIR}/linprdpar.c    
    ${cleed_nsym_SOURCE_DIR}/linprdovlnd.c  
    ${cleed_nsym_SOURCE_DIR}/linpshowbop.c  
    ${cleed_nsym_SOURCE_DIR}/linpmatlm.c 
    # include lindebtemp.c
    ${DEBOBJ}
)

SET (INPOBJSYM
    ${cleed_sym_SOURCE_DIR}/linpbullaysym.c 
    ${cleed_sym_SOURCE_DIR}/linpovlaysym.c  
    ${cleed_sym_SOURCE_DIR}/linprdbulsym.c  
    ${cleed_sym_SOURCE_DIR}/linprdovlsym.c  
    ${cleed_sym_SOURCE_DIR}/linpphase.c     
    ${cleed_sym_SOURCE_DIR}/lwritepar.c     
    ${cleed_sym_SOURCE_DIR}/lreadpar.c
    ${cleed_sym_SOURCE_DIR}/lsymcheck.c
)

# output for LEED programs
SET (OUTOBJ 
    ${cleed_nsym_SOURCE_DIR}/loutbmlist.c 
    ${cleed_nsym_SOURCE_DIR}/louthead.c   
    ${cleed_nsym_SOURCE_DIR}/loutint.c 
)
          
SET (OUTOBJSYM
    ${cleed_sym_SOURCE_DIR}/louthead2.c
    ${cleed_sym_SOURCE_DIR}/loutintsym.c
)

# beams:
SET (BEAMOBJ 
    ${cleed_nsym_SOURCE_DIR}/lbmgen.c    
    ${cleed_nsym_SOURCE_DIR}/lbmselect.c 
    ${cleed_nsym_SOURCE_DIR}/lbmset.c
)

SET (BEAMOBJSYM 
    ${cleed_sym_SOURCE_DIR}/lbmgensym.c 
    ${cleed_sym_SOURCE_DIR}/lbmrotmat.c
)
             
# parameter control:
SET (PCOBJ 
    ${cleed_nsym_SOURCE_DIR}/lpcmktlnd.c 
    ${cleed_nsym_SOURCE_DIR}/lpctemtl.c 
    ${cleed_nsym_SOURCE_DIR}/lpcupdatend.c
)

SET (PCOBJSYM 
    ${cleed_sym_SOURCE_DIR}/lsymcheck.c
    ${cleed_sym_SOURCE_DIR}/lpcupdate.c
    ${cleed_sym_SOURCE_DIR}/lpcmktl.c
)

# layer doubling:
SET (LDOBJ 
    ${cleed_nsym_SOURCE_DIR}/lld2n.c      
    ${cleed_nsym_SOURCE_DIR}/lld2lay.c    
    ${cleed_nsym_SOURCE_DIR}/lld2layrpm.c 
    ${cleed_nsym_SOURCE_DIR}/lldpotstep.c 
    ${cleed_nsym_SOURCE_DIR}/lldpotstep0.c
)

# multiple scattering:
SET (MSOBJ 
    ${cleed_nsym_SOURCE_DIR}/lmsbravlnd.c  
    ${cleed_nsym_SOURCE_DIR}/lmscomplnd.c  
    ${cleed_nsym_SOURCE_DIR}/lmslsumii.c   
    ${cleed_nsym_SOURCE_DIR}/lmslsumij.c   
    ${cleed_nsym_SOURCE_DIR}/lmspartinv.c  
    ${cleed_nsym_SOURCE_DIR}/lmstmatii.c   
    ${cleed_nsym_SOURCE_DIR}/lmstmatndii.c 
    ${cleed_nsym_SOURCE_DIR}/lmstmatij.c   
    ${cleed_nsym_SOURCE_DIR}/lmsymat.c     
    ${cleed_nsym_SOURCE_DIR}/lmsymatset.c  
    ${cleed_nsym_SOURCE_DIR}/lmsymmat.c    
    ${cleed_nsym_SOURCE_DIR}/lmsypy.c
)

SET (MSOBJSYM  
    ${cleed_sym_SOURCE_DIR}/lmscomplsym.c 
    ${cleed_sym_SOURCE_DIR}/lmscompksum.c 
    ${cleed_sym_SOURCE_DIR}/lmsbravlsym.c 
    ${cleed_sym_SOURCE_DIR}/lmsbravl.c    
    ${cleed_sym_SOURCE_DIR}/lmscompl.c    
    ${cleed_sym_SOURCE_DIR}/lmsltok.c
)

SET (PRGOBJ 
    ${cleed_nsym_SOURCE_DIR}/prgcheck.c 
    ${cleed_nsym_SOURCE_DIR}/lhelp.c
)

IF (WIN32)
    LIST (APPEND PRGOBJ 
        ${cleed_nsym_SOURCE_DIR}/getrusage_win32.c 
        ${cleed_nsym_SOURCE_DIR}/getrusage_win32.h
    )
ENDIF (WIN32)
         
SET (PRGOBJSYM
    ${cleed_sym_SOURCE_DIR}/lhelpsym.c
)

SET (TMAOBJ 
    ${cleed_nsym_SOURCE_DIR}/lpccumtl.c 
    ${cleed_nsym_SOURCE_DIR}/lpcmkms.c
)

SET (LEEDOBJ 
    ${CPLOBJ}  
    ${QMOBJ}   
    ${MATOBJ}  
    ${INPOBJ}  
    ${PCOBJ}   
    ${PRGOBJ}  
    ${OUTOBJ}  
    ${BEAMOBJ} 
    ${LDOBJ}   
    ${MSOBJ}   
    ${TMAOBJ}
)

SET (SYMOBJ 
    ${MSOBJSYM} 
    ${OUTOBJSYM} 
    ${INPOBJSYM} 
    ${PCOBJSYM}
    ${PRGOBJSYM}
    ${BEAMOBJSYM}
)

# Specify list of sources for each target

SET (leedlib_SRCS
    ${LEEDOBJ}
    ${SYMOBJ}
)

SET (rfaclib_SRCS
    ${crfac_SOURCE_DIR}/bgets.c
    ${crfac_SOURCE_DIR}/file2buffer.c
    ${crfac_SOURCE_DIR}/rfhelp.c
    ${crfac_SOURCE_DIR}/rflines.c
    ${crfac_SOURCE_DIR}/rfctr2out.c
    ${crfac_SOURCE_DIR}/rfversion.c
    ${crfac_SOURCE_DIR}/crfinput.c
    ${crfac_SOURCE_DIR}/crfintindl.c
    ${crfac_SOURCE_DIR}/crflorentz.c
    ${crfac_SOURCE_DIR}/crfmklide.c
    ${crfac_SOURCE_DIR}/crfmklist.c
    ${crfac_SOURCE_DIR}/crfrdargs.c
    ${crfac_SOURCE_DIR}/crfrdcleed.c
    ${crfac_SOURCE_DIR}/crfrdexpt.c
    ${crfac_SOURCE_DIR}/crfrmin.c
    ${crfac_SOURCE_DIR}/crfrb.c
    ${crfac_SOURCE_DIR}/crfrp.c
    ${crfac_SOURCE_DIR}/crfr1.c
    ${crfac_SOURCE_DIR}/crfr2.c
    ${crfac_SOURCE_DIR}/crfsort.c
    ${crfac_SOURCE_DIR}/crfspline.c
    ${crfac_SOURCE_DIR}/crfsplint.c 
)

SET (searchlib_SRCS
    ${csearch_SOURCE_DIR}/copy_file.c
    ${csearch_SOURCE_DIR}/nrrutil.c
    ${csearch_SOURCE_DIR}/nrrbrent.c
    ${csearch_SOURCE_DIR}/nrrlinmin.c
    ${csearch_SOURCE_DIR}/nrrmnbrak.c
    ${csearch_SOURCE_DIR}/nrrran1.c 
    ${csearch_SOURCE_DIR}/sramoeba.c
    ${csearch_SOURCE_DIR}/sramebsa.c
    ${csearch_SOURCE_DIR}/srckgeo.c
    ${csearch_SOURCE_DIR}/srckrot.c
    ${csearch_SOURCE_DIR}/srevalrf.c
    ${csearch_SOURCE_DIR}/srhelp.c
    ${csearch_SOURCE_DIR}/srmkinp.c
    ${csearch_SOURCE_DIR}/srpo.c
    ${csearch_SOURCE_DIR}/srpowell.c
    ${csearch_SOURCE_DIR}/srrdinp.c
    ${csearch_SOURCE_DIR}/srrdver.c
    ${csearch_SOURCE_DIR}/srsa.c
    ${csearch_SOURCE_DIR}/srer.c
    ${csearch_SOURCE_DIR}/srsx.c
    ${cleed_nsym_SOURCE_DIR}/linpdebtemp.c
)

SET (caoi_leed_SRCS
    ${caoi_leed_SOURCE_DIR}/caoi_leed_bsr.c
    ${caoi_leed_SOURCE_DIR}/caoi_leed_help.c
    ${caoi_leed_SOURCE_DIR}/caoi_leed_main.c
)

SET (caoi_rfac_SRCS
    ${caoi_rfac_SOURCE_DIR}/caoi_rfac_ctr.c
    ${caoi_rfac_SOURCE_DIR}/caoi_rfac_help.c
    ${caoi_rfac_SOURCE_DIR}/caoi_rfac_main.c
)

SET (cleed_nsym_SRCS  
    ${cleed_nsym_SOURCE_DIR}/cleed_nsym.c
)

SET (cleed_sym_SRCS
    ${cleed_sym_SOURCE_DIR}/cleed_sym.c
)

SET (csearch_SRCS
    ${csearch_SOURCE_DIR}/csearch.c
    ${searchlib_SRCS}
)

SET (crfac_SRCS
    ${crfac_SOURCE_DIR}/crfac.c 
    ${rfaclib_SRCS}
)

SET (debye_SRCS
    ${debye_SOURCE_DIR}/debye.c
)

SET (ftsmoothlib_SRCS
    ${ftsmooth_SOURCE_DIR}/ftsmooth.c
    ${ftsmooth_SOURCE_DIR}/ftsmooth_debug.c
    ${ftsmooth_SOURCE_DIR}/ftsmooth_help.c
    ${ftsmooth_SOURCE_DIR}/ftsmooth_parse_args.c
    ${ftsmooth_SOURCE_DIR}/offset_data.c
    ${ftsmooth_SOURCE_DIR}/print_data.c
    ${ftsmooth_SOURCE_DIR}/read_data.c
    ${ftsmooth_SOURCE_DIR}/remove_negative_data.c
    ${ftsmooth_SOURCE_DIR}/trim_data.c
)

SET (ftsmooth_SRCS
    ${ftsmooth_SOURCE_DIR}/ftsmooth_main.c
    ${ftsmoothlib_SRCS}
)

SET (mkivlib_SRCS
    ${mkiv_SOURCE_DIR}/bsmooth.c
    ${mkiv_SOURCE_DIR}/calca.c
    ${mkiv_SOURCE_DIR}/calcbase.c
    ${mkiv_SOURCE_DIR}/calcoi.c
    ${mkiv_SOURCE_DIR}/calcspotpos.c
    ${mkiv_SOURCE_DIR}/convtif2xv.c
    ${mkiv_SOURCE_DIR}/convxv2tif.c
    ${mkiv_SOURCE_DIR}/drawbound.c
    ${mkiv_SOURCE_DIR}/drawell.c
    ${mkiv_SOURCE_DIR}/drawgrid.c
    ${mkiv_SOURCE_DIR}/filename.c
    ${mkiv_SOURCE_DIR}/file_functs.c
    ${mkiv_SOURCE_DIR}/fimax4.c
    ${mkiv_SOURCE_DIR}/getint.c
    ${mkiv_SOURCE_DIR}/markref.c
    ${mkiv_SOURCE_DIR}/mem4spots.c
    ${mkiv_SOURCE_DIR}/mkmask.c
    ${mkiv_SOURCE_DIR}/outtif.c
    ${mkiv_SOURCE_DIR}/plotind.c
    ${mkiv_SOURCE_DIR}/quicksort.c
    ${mkiv_SOURCE_DIR}/readinp.c
    ${mkiv_SOURCE_DIR}/readvar.c
    ${mkiv_SOURCE_DIR}/refinp.c
    ${mkiv_SOURCE_DIR}/setcontrol.c
    ${mkiv_SOURCE_DIR}/sign.c
    ${mkiv_SOURCE_DIR}/readtif.c
    ${mkiv_SOURCE_DIR}/writetif.c
    
    ${mkiv_SOURCE_DIR}/signs.h
    ${mkiv_SOURCE_DIR}/tiffio.h
    ${mkiv_SOURCE_DIR}/variables.h
    ${mkiv_SOURCE_DIR}/v_iorw.h
    ${mkiv_SOURCE_DIR}/vinclude.h
    
    ${mkiv_SOURCE_DIR}/mkiv.h
    ${mkiv_SOURCE_DIR}/mkiv_ver.h
    

)

SET (mkiv_SRCS
    ${mkiv_SOURCE_DIR}/mkiv_help.c
    ${mkivlib_SRCS}
)

SET (latt_SRCS
    ${latt_SOURCE_DIR}/latt.c
    ${latt_SOURCE_DIR}/latt_help.c
)

SET (patt_SRCS
    ${patt_SOURCE_DIR}/patt.c
    ${patt_SOURCE_DIR}/patt_help.c
)

SET(EXTRA_COMPONENTS "")

# Add list of targets to build
ADD_LIBRARY(leed SHARED ${leedlib_SRCS})
ADD_LIBRARY(leedStatic STATIC ${leedlib_SRCS})
ADD_LIBRARY(rfac SHARED ${rfaclib_SRCS})
ADD_LIBRARY(rfacStatic STATIC ${rfaclib_SRCS})
ADD_LIBRARY(search SHARED ${searchlib_SRCS})
ADD_LIBRARY(searchStatic STATIC ${searchlib_SRCS})
ADD_LIBRARY(ftsmoothLib SHARED ${ftsmoothlib_SRCS})
ADD_LIBRARY(ftsmoothLibStatic STATIC ${ftsmoothlib_SRCS})
ADD_LIBRARY(mkivLib SHARED ${mkivlib_SRCS})
ADD_LIBRARY(mkivLibStatic STATIC ${mkivlib_SRCS})

IF (USE_PHASESHIFTS STREQUAL "ON")
    IF (NOT PYTHON_PIP_EXECUTABLE STREQUAL "PYTHON_PIP-NOTFOUND")
        ADD_CUSTOM_COMMAND (TARGET ${PROJECT_NAME} POST_BUILD
            COMMAND pip install phaseshifts
            COMMENT "Install Python phaseshift package using pip"
        )
    ENDIF (NOT PYTHON_PIP STREQUAL "PYTHON_PIP-NOTFOUND")
ENDIF (USE_PHASESHIFTS STREQUAL "ON")

# install documents
IF (INSTALL_DOC STREQUAL "ON")
    SET (EXTRA_COMPONENTS "${EXTRA_COMPONENTS} documentation")
    FILE(GLOB_RECURSE DOCUMENTS  RELATIVE ${PROJECT_SOURCE_DIR}
        ${PROJECT_SOURCE_DIR}/doc/*.pdf)
    INSTALL(FILES ${DOCUMENTS} DESTINATION doc COMPONENT documentation)
    
    FILE(GLOB_RECURSE MAN_PAGES RELATIVE ${PROJECT_SOURCE_DIR} 
        ${PROJECT_SOURCE_DIR}/man/*.*)
    INSTALL(FILES ${MAN_PAGES} DESTINATION man COMPONENT documentation)

    SET (CPACK_COMPONENT_DOCUMENTATION_DISPLAY_NAME "Documentation")
ENDIF (INSTALL_DOC STREQUAL "ON")

IF (WIN32)
    # ============ BUILD SETTINGS FOR WINDOWS ============
    # ============ USING VISUAL STUDIO 2008 ============
    # /Od -> disable optimization
    # /W3 -> warning level
    # /ZI -> program database for edit & continue
    # /Gm -> enable minimal rebuild
    # /RTC1 -> runtime checks: stack frames + uninitialized variables
    # /MTd -> Multi-threaded Debug
    
    # Given this bug in the NMake generator related to 'manifest files' in CMake 2.6
    # http://www.cmake.org/Bug/view.php?id=7222
    # it is recommended to use CMake 2.4.7 in Windows, so that both the
    # application and the installer can be built from the command line.

    # SET(CMAKE_CXX_FLAGS_DEBUG "/RTC1 /Gm /MTd /ZI /W3 /Od")
    #SET(CMAKE_CXX_FLAGS_RELEASE "/RTC1 /Gm /MT /Zi")
    #SET(CMAKE_EXE_LINKER_FLAGS "/MACHINE:X86 /DYNAMICBASE:NO /MANIFEST:NO /LTCG")

    # configure resource files for Windows icons
    CONFIGURE_FILE ("${caoi_leed_SOURCE_DIR}/res/windows/caoi_leed.rc.in"
        "${caoi_leed_SOURCE_DIR}/res/windows/caoi_leed.rc" IMMEDIATE @ONLY )

    CONFIGURE_FILE ("${caoi_rfac_SOURCE_DIR}/res/windows/caoi_rfac.rc.in"
        "${caoi_rfac_SOURCE_DIR}/res/windows/caoi_rfac.rc" IMMEDIATE @ONLY )
        
    CONFIGURE_FILE ("${cleed_nsym_SOURCE_DIR}/res/windows/cleed_nsym.rc.in"
        "${cleed_nsym_SOURCE_DIR}/res/windows/cleed_nsym.rc" IMMEDIATE @ONLY )

    CONFIGURE_FILE ("${cleed_sym_SOURCE_DIR}/res/windows/cleed_sym.rc.in"
        "${cleed_sym_SOURCE_DIR}/res/windows/cleed_sym.rc" IMMEDIATE @ONLY )        

    CONFIGURE_FILE ("${crfac_SOURCE_DIR}/res/windows/crfac.rc.in"
        "${crfac_SOURCE_DIR}/res/windows/crfac.rc" IMMEDIATE @ONLY )
        
    CONFIGURE_FILE ("${csearch_SOURCE_DIR}/res/windows/csearch.rc.in"
        "${csearch_SOURCE_DIR}/res/windows/csearch.rc" IMMEDIATE @ONLY )
        
    CONFIGURE_FILE ("${ftsmooth_SOURCE_DIR}/res/windows/ftsmooth.rc.in"
        "${ftsmooth_SOURCE_DIR}/res/windows/ftsmooth.rc" IMMEDIATE @ONLY )
        
    CONFIGURE_FILE ("${latt_SOURCE_DIR}/res/windows/latt.rc.in"
        "${latt_SOURCE_DIR}/res/windows/latt.rc" IMMEDIATE @ONLY )

    CONFIGURE_FILE ("${mkiv_SOURCE_DIR}/res/windows/mkiv.rc.in"
        "${mkiv_SOURCE_DIR}/res/windows/mkiv.rc" IMMEDIATE @ONLY )
        
    CONFIGURE_FILE ("${patt_SOURCE_DIR}/res/windows/patt.rc.in"
        "${patt_SOURCE_DIR}/res/windows/patt.rc" IMMEDIATE @ONLY )
    
    # This sets up the exe icon for windows under mingw.
    IF (MINGW)
        SET(CMAKE_RC_COMPILER_INIT windres)
        ENABLE_LANGUAGE(RC)
        SET(CMAKE_RC_COMPILE_OBJECT
            "<CMAKE_RC_COMPILER> -O coff <DEFINES> -i <SOURCE> -o <OBJECT>")
    ENDIF (MINGW)
    
    # ADD_CUSTOM_TARGET(caoi_leed.res
        # COMMAND ${CMAKE_RC_COMPILER} 
            # ${caoi_leed_SOURCE_DIR}/res/windows/caoi_leed.rc
            # ${caoi_leed_SOURCE_DIR}/res/windows/caoi_leed.res
        # DEPENDS ${caoi_leed_SOURCE_DIR}/res/windows/caoi_leed.ico
        # SOURCES ${caoi_leed_SOURCE_DIR}/res/windows/caoi_leed.rc
    # )
    
    # ADD_CUSTOM_TARGET(caoi_rfac.res
        # COMMAND ${CMAKE_RC_COMPILER} 
            # ${caoi_rfac_SOURCE_DIR}/res/windows/caoi_rfac.rc
            # ${caoi_rfac_SOURCE_DIR}/res/windows/caoi_rfac.res
        # DEPENDS ${caoi_rfac_SOURCE_DIR}/res/windows/caoi_rfac.ico
        # SOURCES ${caoi_rfac_SOURCE_DIR}/res/windows/caoi_rfac.rc
    # )
    
    # ADD_CUSTOM_TARGET(crfac.res
        # COMMAND ${CMAKE_RC_COMPILER} 
            # ${crfac_SOURCE_DIR}/res/windows/crfac.rc
            # ${crfac_SOURCE_DIR}/res/windows/crfac.res
        # DEPENDS ${crfac_SOURCE_DIR}/res/windows/crfac.ico
        # SOURCES ${crfac_SOURCE_DIR}/res/windows/crfac.rc
    # )
    
    # ADD_CUSTOM_TARGET(cleed_nsym.res
        # COMMAND ${CMAKE_RC_COMPILER} 
            # ${cleed_nsym_SOURCE_DIR}/res/windows/cleed_nsym.rc
            # ${cleed_nsym_SOURCE_DIR}/res/windows/cleed_nsym.res
        # DEPENDS ${cleed_nsym_SOURCE_DIR}/res/windows/cleed_nsym.ico
        # SOURCES ${cleed_nsym_SOURCE_DIR}/res/windows/cleed_nsym.rc
    # )
    
    # ADD_CUSTOM_TARGET(cleed_sym.res
        # COMMAND ${CMAKE_RC_COMPILER} 
            # ${cleed_sym_SOURCE_DIR}/res/windows/cleed_sym.rc
            # ${cleed_sym_SOURCE_DIR}/res/windows/cleed_sym.res
        # DEPENDS ${cleed_sym_SOURCE_DIR}/res/windows/cleed_sym.ico
        # SOURCES ${cleed_sym_SOURCE_DIR}/res/windows/cleed_sym.rc
    # )
    
    # ADD_CUSTOM_TARGET(csearch.res
        # COMMAND ${CMAKE_RC_COMPILER} 
            # ${csearch_SOURCE_DIR}/res/windows/csearch.rc
            # ${csearch_SOURCE_DIR}/res/windows/csearch.res
        # DEPENDS ${csearch_SOURCE_DIR}/res/windows/csearch.ico
        # SOURCES ${csearch_SOURCE_DIR}/res/windows/csearch.rc
    # )
    
    # ADD_CUSTOM_TARGET(ftsmooth.res
        # COMMAND ${CMAKE_RC_COMPILER} 
            # ${ftsmooth_SOURCE_DIR}/res/windows/ftsmooth.rc
            # ${ftsmooth_SOURCE_DIR}/res/windows/ftsmooth.res
        # DEPENDS ${ftsmooth_SOURCE_DIR}/res/windows/ftsmooth.ico
        # SOURCES ${ftsmooth_SOURCE_DIR}/res/windows/ftsmooth.rc
    # )
    
    SET (caoi_leed_win_resources_SRCS
        ${caoi_leed_SOURCE_DIR}/res/windows/caoi_leed.rc
    )
    
    SET (caoi_rfac_win_resources_SRCS
        ${caoi_rfac_SOURCE_DIR}/res/windows/caoi_rfac.rc
    )
    
    SET (cleed_nsym_win_resources_SRCS
        ${cleed_nsym_SOURCE_DIR}/res/windows/cleed_nsym.rc
    )
    
    SET (cleed_sym_win_resources_SRCS
        ${cleed_sym_SOURCE_DIR}/res/windows/cleed_sym.rc
    )
    
    SET (crfac_win_resources_SRCS
        ${crfac_SOURCE_DIR}/res/windows/crfac.rc
    )
    
    SET (csearch_win_resources_SRCS
        ${csearch_SOURCE_DIR}/res/windows/csearch.rc
    )
    
    SET (ftsmooth_win_resources_SRCS
        ${ftsmooth_SOURCE_DIR}/res/windows/ftsmooth.rc
    )
    
    SET (latt_win_resources_SRCS
        ${latt_SOURCE_DIR}/res/windows/latt.rc
    )

    SET (patt_win_resources_SRCS
        ${patt_SOURCE_DIR}/res/windows/patt.rc
    )
    
    SET (mkiv_win_resources_SRCS
        ${mkiv_SOURCE_DIR}/res/windows/mkiv.rc
    )
    
    # Header files are located in these directories
    INCLUDE_DIRECTORIES (
        ${PROJECT_SOURCE_DIR}/lib/win32/libtiff/include
    )

    ADD_EXECUTABLE(caoi_leed ${caoi_leed_SRCS} 
        ${caoi_leed_win_resources_SRCS}
    )
    ADD_EXECUTABLE(caoi_rfac ${caoi_rfac_SRCS} 
        ${caoi_rfac_win_resources_SRCS}
    )
    ADD_EXECUTABLE(cleed_nsym ${cleed_nsym_SRCS}
        ${cleed_nsym_win_resources_SRCS}
    )
    ADD_EXECUTABLE(cleed_sym ${cleed_sym_SRCS}
        ${cleed_sym_win_resources_SRCS}
    )
    ADD_EXECUTABLE(crfac WIN32
        ${crfac_SRCS} 
        ${crfac_win_resources_SRCS}
    )
    ADD_EXECUTABLE(csearch 
        ${csearch_SRCS} 
        ${csearch_win_resources_SRCS}
    )
    ADD_EXECUTABLE(debye ${debye_SRCS})
    ADD_EXECUTABLE(ftsmooth ${ftsmooth_SRCS}
        ${ftsmooth_win_resources_SRCS}
    )
    ADD_EXECUTABLE(latt ${latt_SRCS} 
        ${latt_win_resources_SRCS}
    )
    ADD_EXECUTABLE(mkiv ${mkiv_SOURCE_DIR}/mkiv.c 
        ${mkiv_SRCS} 
        ${mkiv_win_resources_SRCS}
    )
    ADD_EXECUTABLE(patt ${patt_SRCS} 
        ${patt_win_resources_SRCS}
    )

    # target link libraries
    SET (WIN32_TARGETS leed leedStatic rfac rfacStatic search searchStatic cleed_nsym cleed_sym)
    FOREACH(WIN32_TARGET ${WIN32_TARGETS})
    TARGET_LINK_LIBRARIES (${WIN32_TARGET} ws2_32 psapi)
    ENDFOREACH(WIN32_TARGET)
    TARGET_LINK_LIBRARIES (mkiv -L"${TIFF_LIBRARY_DIR}" tiff3 m)
    TARGET_LINK_LIBRARIES (mkivLib -L"${TIFF_LIBRARY_DIR}" tiff3 m)
    TARGET_LINK_LIBRARIES (mkivLibStatic -L"${TIFF_LIBRARY_DIR}" tiff3 m)
    
    # These are the symbols for the linker
    INSTALL(FILES
        ${PROJECT_SOURCE_DIR}/lib/win32/libtiff3.dll
        ${PROJECT_SOURCE_DIR}/lib/win32/jpeg62.dll
        ${PROJECT_SOURCE_DIR}/lib/win32/zlib1.dll
        ${RUNTIME_LIBRARIES}
        DESTINATION bin
        COMPONENT applications
    )
    
     # install scripts
    FILE (GLOB WINDOWS_SCRIPTS 
        ${PROJECT_SOURCE_DIR}/src/scripts/*.bat
        ${PROJECT_SOURCE_DIR}/src/scripts/*.cmd
        ${PROJECT_SOURCE_DIR}/src/scripts/*.ps
        ${PROJECT_SOURCE_DIR}/src/scripts/*.py
    ) 
    
    INSTALL(FILES
        ${WINDOWS_SCRIPTS}
        DESTINATION bin
        COMPONENT applications
    )

    # There is a bug in NSI that does not handle full unix paths properly. Make
    # sure there is at least one set of four (4) backlasshes.
    SET(CPACK_PACKAGE_ICON "${PROJECT_SOURCE_DIR}\\\\src\\\\res\\\\CLEED.ico")
    SET(CPACK_NSIS_INSTALLED_ICON_NAME "bin\\\\cleed_nsym.exe")
    SET(CPACK_NSIS_HELP_LINK "http://www.reading.ac.uk/web/FILES/chemistry/Georg_Held_LEED_Description.pdf")
    SET(CPACK_NSIS_URL_INFO_ABOUT "http://www.reading.ac.uk/web/FILES/chemistry/Georg_Held_LEED_Description.pdf")
    SET(CPACK_NSIS_CONTACT "g.held@reading.ac.uk or liam.deacon@diamond.ac.uk")
    SET(CPACK_NSIS_MODIFY_PATH ON)
    # SET(CPACK_PACKAGE_EXECUTABLES "cleed-gui;cleed-gui")
    SET(CPACK_GENERATOR "NSIS;ZIP")
    SET(CPACK_NSIS_DISPLAY_NAME "CLEED")
    SET(CPACK_NSIS_INSTALLER_ICON_CODE "")
    SET(CPACK_PACKAGE_SOURCE_DIR "${CMAKE_SOURCE_DIR}")
    INCLUDE(CPack)
    
ELSE (WIN32)

    IF (UNIX)
        IF (APPLE)
            # This is bundle metadata to create "bundles" and "Universal Binaries" on Mac OS X
            # http://www.cmake.org/Wiki/CMake_FAQ#How_do_I_build_universal_binaries_on_Mac_OS_X.3F
            # By the way, there is a bug in the cross-compilation SDKs for Tiger in Leopard,
            # so you need to follow these instructions:
            # http://groups.google.com/group/vim_mac/browse_thread/thread/064da55ec412e768
            # which means typing the following command in Terminal.app:
            # $ sudo ln -s /Developer/SDKs/MacOSX10.4u.sdk/usr/lib/crt1.o /Developer/SDKs/MacOSX10.4u.sdk/usr/lib/crt1.10.5.o
            SET(CMAKE_OSX_SYSROOT /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.8.sdk)
            SET(CMAKE_OSX_ARCHITECTURES i386)
            SET(MACOSX_BUNDLE_ICON_FILE icon.icns)
            SET(MACOSX_BUNDLE_BUNDLE_NAME cleed)
            SET(MACOSX_BUNDLE_BUNDLE_VERSION ${VERSION})
            SET(MACOSX_BUNDLE_SHORT_VERSION_STRING ${VERSION})
            SET(MACOSX_BUNDLE_LONG_VERSION_STRING "Version ${VERSION}")

            # ============ BUILD SETTINGS FOR MAC ============
            # ============ USING MAKEFILE ============
            # This information is needed to compile the GUI application as a "bundle".
            # Info on how to use OSX frameworks taken from
            # http://www.vtk.org/Wiki/CMake:HowToUseExistingOSXFrameworks
        
            # Header files are located in these directories
            INCLUDE_DIRECTORIES (
                /usr/local/include/cleed/../ # Somehow the tests won't build if not specified like this!
            )
        
            # Libraries are located in these directories
            LINK_DIRECTORIES (
                /usr/local/lib/
            )
        
            ADD_EXECUTABLE(caoi_leed MACOSX_BUNDLE ${caoi_leed_SRCS})
            ADD_EXECUTABLE(caoi_rfac MACOSX_BUNDLE ${caoi_rfac_SRCS})
            ADD_EXECUTABLE(cleed_nsym MACOSX_BUNDLE ${cleed_nsym_SRCS})
            ADD_EXECUTABLE(cleed_sym MACOSX_BUNDLE ${cleed_sym_SRCS})
            ADD_EXECUTABLE(crfac  MACOSX_BUNDLE ${crfac_SOURCE_DIR}/crfac.c ${crfac_SRCS})
            ADD_EXECUTABLE(csearch MACOSX_BUNDLE ${csearch_SOURCE_DIR}/csearch.c ${csearch_SRCS})
            ADD_EXECUTABLE(debye MACOSX_BUNDLE ${debye_SRCS})
            ADD_EXECUTABLE(ftsmooth MACOSX_BUNDLE ${ftsmooth_SRCS})
            ADD_EXECUTABLE(latt MACOSX_BUNDLE ${latt_SRCS})
            ADD_EXECUTABLE(mkiv MACOSX_BUNDLE ${mkiv_SOURCE_DIR}/mkiv.c ${mkiv_SRCS})
            ADD_EXECUTABLE(patt MACOSX_BUNDLE ${patt_SRCS})
        

            ENABLE_TESTING()
            #ADD_TEST(cleed ${CMAKE_CURRENT_BINARY_DIR}/cleedtest)
            
            # The support for Mac OS X bundle installation is available for version 2.6 of CMake:
            # http://www.cmake.org/pipermail/cmake/2007-October/016893.html
            INSTALL(TARGETS 
                caoi_leed caoi_rfac cleed_nsym cleed_sym crfac csearch 
                ftsmooth latt patt mkiv leedlib
                # If not using ".." the package would not build correctly
                # or even worse, it would install the app in /usr
                BUNDLE DESTINATION ../Applications
            )
            
            SET(CPACK_PACKAGE_INSTALL_DIRECTORY "cleed ${CMake_VERSION_MAJOR}.${CMake_VERSION_MINOR}")
            SET(CPACK_PACKAGE_EXECUTABLES "cleed;cleed")
            SET(CPACK_GENERATOR "PackageMaker")
            INCLUDE(CPack)
            
            INSTALL_FILES(${CPACK_PACKAGE_INSTALL_DIRECTORY} ${RUNTIME_LIBRARIES})
        
        ELSE (APPLE)
            # ============ BUILD SETTINGS FOR LINUX ============
            # ============ USING MAKEFILE ============
            SET(EXTRA_LIBS
                pthread
            )
            # Header files are located in these directories
            INCLUDE_DIRECTORIES (
                "/usr/local/include/"
                "/usr/include"
            )
        
            # Libraries are located in these directories
            LINK_DIRECTORIES (
                "/usr/local/lib/"
                "/usr/X11R6/lib/"
            )
            
            ADD_DEFINITIONS(
                -DLINUX
            )
        
            SET (CPACK_GENERATOR "TGZ;STGZ")  
        
            IF (CMAKE_SYSTEM_NAME MATCHES "Linux")
                SET (DDM_DESKTOP_DIR "/usr/share/applications/")
                SET (DDM_PIXMAPS_DIR "/usr/share/icons/")
                
                # copy the icon/pixmap files
                INSTALL (FILES 
                    share/*.desktop 
                    share/*.xml 
                    DESTINATION ${DDM_DESKTOP_DIR}
                )
                INSTALL (FILES share/*.png DESTINATION ${DDM_PIXMAPS_DIR})
                
                # try to set up the menu system
                find_program(XDG-MIME_EXECUTABLE xdg-mime)
                find_program(XDG-DESKTOP-MENU_EXECUTABLE xdg-desktop-menu)
                
                INSTALL(CODE "
                    execute_process(COMMAND ${XDG-MIME_EXECUTABLE} install --novendor ${DDM_DESKTOP_DIR}/ddm.xml)
                    execute_process(COMMAND ${XDG-DESKTOP-MENU_EXECUTABLE} install --novendor ${DDM_DESKTOP_DIR}/ddm.desktop)
                    execute_process(COMMAND ${XDG-MIME_EXECUTABLE} default ${DDM_DESKTOP_DIR}/ddm.desktop application/x-ddm-item)
                    "
                )
                
                # Debian packaging
                INCLUDE (${CMAKE_MODULE_PATH}/DpkgBuild.cmake)
                
                IF(DPKG_FOUND AND NOT WIN32)
                    SET(CPACK_GENERATOR "${CPACK_GENERATOR};DEB")
                    SET(CPACK_DEBIAN_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
                    SET(CPACK_DEBIAN_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION})
                    SET(CPACK_DEBIAN_PACKAGE_DESCRIPTION ${CPACK_PACKAGE_DESCRIPTION_SUMMARY})
                    SET(CPACK_DEBIAN_PACKAGE_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
                    SET(CPACK_DEBIAN_PACKAGE_PRIORITY "optional")
                    SET(CPACK_DEBIAN_PACKAGE_DEBUG ON)
                    SET(CPACK_DEBIAN_PACKAGE_DEPENDS ${PACKAGE_REQUIRES})
                    SET(CPACK_DEBIAN_PACKAGE_DEPENDS "libtiff ( >= 3.0 ), libpng, libz") # Specify dependencies here
                    SET(CPACK_DEBIAN_PACKAGE_SUGGESTS "ImageMagick, Python")
                    SET(CPACK_SET_DESTDIR TRUE)
                ENDIF(DPKG_FOUND AND NOT WIN32)
                
                # RPM packaging
                INCLUDE (${CMAKE_MODULE_PATH}/RpmBuild.cmake)
                
                IF (RPM_FOUND AND NOT WIN32)
                    SET(CPACK_GENERATOR "${CPACK_GENERATOR};RPM")
                    SET(CPACK_RPM_PACKAGE_NAME ${CPACK_PACKAGE_NAME})
                    SET(CPACK_RPM_PACKAGE_VERSION ${CPACK_PACKAGE_VERSION})
                    SET(CPACK_RPM_PACKAGE_DESCRIPTION ${CPACK_PACKAGE_DESCRIPTION_SUMMARY})
                    SET(CPACK_RPM_PACKAGE_MAINTAINER "${CPACK_PACKAGE_VENDOR} <${CPACK_PACKAGE_CONTACT}>")
                    SET(CPACK_RPM_PACKAGE_PRIORITY "optional")
                    SET(CPACK_RPM_PACKAGE_LICENSE "${LICENSE}")
                    SET(CPACK_RPM_PACKAGE_DEBUG ON)
                    SET(CPACK_RPM_PACKAGE_REQUIRES ${PACKAGE_REQUIRES})
                    SET(CPACK_RPM_PACKAGE_REQUIRES "libtiff ( >= 3.0 ), libpng, libz") # Specify dependencies here
                    SET(CPACK_SET_DESTDIR TRUE)
                    SET(CPACK_RPM_PACKAGE_SUGGESTS "ImageMagick, Python")
                    SET(CPACK_RPM_PACKAGE_URL "${CPACK_PACKAGE_URL}")
                ENDIF (RPM_FOUND AND NOT WIN32)
                
                
                
            ENDIF (CMAKE_SYSTEM_NAME MATCHES "Linux")
        
            ADD_EXECUTABLE(caoi_leed ${caoi_leed_SRCS})
            ADD_EXECUTABLE(caoi_rfac ${caoi_rfac_SRCS})
            ADD_EXECUTABLE(cleed_nsym ${cleed_nsym_SRCS})
            ADD_EXECUTABLE(cleed_sym ${cleed_sym_SRCS})
            ADD_EXECUTABLE(crfac  ${crfac_SOURCE_DIR}/crfac.c ${crfac_SRCS})
            ADD_EXECUTABLE(csearch ${csearch_SOURCE_DIR}/csearch.c ${csearch_SRCS})
            ADD_EXECUTABLE(debye ${debye_SRCS})
            ADD_EXECUTABLE(ftsmooth ${ftsmooth_SRCS})
            ADD_EXECUTABLE(latt ${latt_SRCS})
            ADD_EXECUTABLE(mkiv ${mkiv_SOURCE_DIR}/mkiv.c ${mkiv_SRCS})
            ADD_EXECUTABLE(patt ${patt_SRCS})
        
            # These are the symbols for the linker
            TARGET_LINK_LIBRARIES (mkiv tiff)
            TARGET_LINK_LIBRARIES (mkivLib tiff)
            TARGET_LINK_LIBRARIES (mkivLibStatic tiff)
                        
            ENABLE_TESTING()
            ADD_TEST(cleedtest ${CMAKE_CURRENT_BINARY_DIR}/cleedtest)
            
            # install scripts
            FILE (GLOB LINUX_SCRIPTS 
                ${PROJECT_SOURCE_DIR}/src/scripts/*.sh
                ${PROJECT_SOURCE_DIR}/src/scripts/*.py
            )    
            INSTALL(FILES
                ${PROJECT_SOURCE_DIR}/build/linux/install.sh
                ${LINUX_SCRIPTS}
                DESTINATION bin
                COMPONENT applications
            )
            
            INCLUDE(CPack)

        ENDIF (APPLE)
    ENDIF (UNIX)
ENDIF (WIN32)

SET_TARGET_PROPERTIES(ftsmoothLib PROPERTIES OUTPUT_NAME ftsmooth)
SET_TARGET_PROPERTIES(ftsmoothLibStatic PROPERTIES OUTPUT_NAME ftsmooth)
SET_TARGET_PROPERTIES(leedStatic PROPERTIES OUTPUT_NAME leed)
SET_TARGET_PROPERTIES(rfacStatic PROPERTIES OUTPUT_NAME rfac)
SET_TARGET_PROPERTIES(searchStatic PROPERTIES OUTPUT_NAME search)
SET_TARGET_PROPERTIES(mkivLib PROPERTIES OUTPUT_NAME mkiv)
SET_TARGET_PROPERTIES(mkivLibStatic PROPERTIES OUTPUT_NAME mkiv)

# every target is linked against the math library
TARGET_LINK_LIBRARIES (cleed_nsym leed)
TARGET_LINK_LIBRARIES (cleed_sym leed)
TARGET_LINK_LIBRARIES (crfac rfac)
TARGET_LINK_LIBRARIES (csearch search)
TARGET_LINK_LIBRARIES (mkiv mkivLib)
SET (CMAKE_TARGETS caoi_leed caoi_rfac cleed_sym cleed_nsym crfac csearch debye 
    ftsmooth ftsmoothLib ftsmoothLibStatic latt leed leedStatic 
    mkiv patt rfac rfacStatic search searchStatic mkivLib mkivLibStatic)
FOREACH(CMAKE_TARGET ${CMAKE_TARGETS})
TARGET_LINK_LIBRARIES(${CMAKE_TARGET} m)
ENDFOREACH(CMAKE_TARGET)

INSTALL(TARGETS 
    caoi_leed caoi_rfac 
    cleed_nsym cleed_sym crfac csearch 
    leed rfac search ftsmoothLib 
    debye ftsmooth latt patt 
    mkiv mkivLib
    RUNTIME DESTINATION bin
    LIBRARY DESTINATION bin
    COMPONENT applications
)

INSTALL (TARGETS
    leedStatic rfacStatic searchStatic ftsmoothLibStatic mkivLibStatic
    COMPONENT applications
    ARCHIVE DESTINATION lib
)

# install include files for external library use
INSTALL ( DIRECTORY "${PROJECT_SOURCE_DIR}/src/include" DESTINATION . 
    COMPONENT headers
    PATTERN "*~" EXCLUDE PATTERN "*CVS*" EXCLUDE PATTERN "*.bak" EXCLUDE)

# setup file associations and desktop icons
IF (UNIX AND NOT APPLE)
    INSTALL ( DIRECTORY "${PROJECT_SOURCE_DIR}/share" DESTINATION . COMPONENT associations
        PATTERN "*~" EXCLUDE PATTERN "*CVS*" EXCLUDE PATTERN "*.bak" EXCLUDE)
    SET (CPACK_COMPONENT_ASSOCIATIONS_DISPLAY_NAME "File Associations")
    SET (EXTRA_COMPONENTS "${EXTRA_COMPONENTS} associations")
ELSEIF(WIN32)
    INSTALL (DIRECTORY "${PROJECT_SOURCE_DIR}/data/win32/icons" DESTINATION . COMPONENT icons)
    SET (CPACK_COMPONENT_ICONS_DISPLAY_NAME "Icons")
    SET (EXTRA_COMPONENTS "${EXTRA_COMPONENTS} icons")
ENDIF ()

INSTALL (DIRECTORY "${PROJECT_SOURCE_DIR}/examples" DESTINATION . COMPONENT examples)
INSTALL (DIRECTORY "${PROJECT_SOURCE_DIR}/data/phase" DESTINATION . COMPONENT phaseshifts)

# specify CPack components
SET (CPACK_COMPONENTS_ALL 
    applications examples phase libraries 
    headers associations ${EXTRA_COMPONENTS})
SET (CPACK_COMPONENT_APPLICATIONS_DISPLAY_NAME "CLEED Runtime")
SET (CPACK_COMPONENT_HEADERS_DISPLAY_NAME "C/C++ Headers")
SET (CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME "Static Libraries")
SET (CPACK_COMPONENT_EXAMPLES_DISPLAY_NAME "Examples")
SET (CPACK_COMPONENT_PHASESHIFTS_DISPLAY_NAME "Phase Shifts Data")

